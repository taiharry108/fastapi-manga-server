{
    "pipes": [],
    "interfaces": [
        {
            "name": "Auth",
            "id": "interface-Auth-b701ffdcb65b60c939be2f73f52f1dc3",
            "file": "src/app/model/auth.ts",
            "type": "interface",
            "sourceCode": "export interface Auth {\n    access_token: string;\n    token_type: string;\n}\n",
            "properties": [
                {
                    "name": "access_token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "token_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Chapter",
            "id": "interface-Chapter-95fe1f51482b2dd25dd179880ef5bb7d",
            "file": "src/app/model/chapter.ts",
            "type": "interface",
            "sourceCode": "export interface Chapter {\n    title: string;\n    page_url: string;\n}\n",
            "properties": [
                {
                    "name": "page_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Manga",
            "id": "interface-Manga-709dc252fc3bf9a4643d72119f29db27",
            "file": "src/app/model/manga.ts",
            "type": "interface",
            "sourceCode": "import { Chapter } from './chapter';\n\nexport interface Manga {\n    name: string;\n    url: string;\n    chapters: Map<string, Chapter[]>;\n    finished: boolean;\n    thum_img: string;\n    last_update: string;\n}\n",
            "properties": [
                {
                    "name": "chapters",
                    "type": "Map<string | Chapter[]>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "finished",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "last_update",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "thum_img",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-6470fd96ddcebbfd322e16481b9d9cd8",
            "file": "src/app/sse.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface Message {\n  message: string;\n  total: number;\n  idx: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SseService {\n  constructor() {}\n\n  getServerSentEvent(url: string): Observable<Message> {\n    return Observable.create((observer) => {\n      const eventSource = this.getEventSource(url);\n\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (event.data !== \"{}\")\n          { \n            observer.next(data);\n          }\n        else\n          {\n            eventSource.close();\n            observer.complete();\n          }\n      }\n\n      eventSource.onerror = error => {\n          observer.error(error);\n      }      \n    });\n  }\n\n  private getEventSource(url: string): EventSource {\n    return new EventSource(url);\n  }\n}\n",
            "properties": [
                {
                    "name": "idx",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SearchResult",
            "id": "interface-SearchResult-aab5c3d97221a5eb73d759b94f1f9341",
            "file": "src/app/model/search-result.ts",
            "type": "interface",
            "sourceCode": "export interface SearchResult {\n    name: string;\n    url: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-3e89cd012511c7d66b98e1d9d13012c5",
            "file": "src/app/api.service.ts",
            "properties": [
                {
                    "name": "_currentSite",
                    "type": "MangaSite",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "_searchEmpty",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imagesSseEvent",
                    "defaultValue": "new Subject<Message>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "mangaWIthIndexResultSubject",
                    "defaultValue": "new Subject<Manga>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "searchResultSubject",
                    "defaultValue": "new Subject<SearchResult[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "serverUrl",
                    "defaultValue": "environment.serverUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "emptySearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "getImages",
                    "args": [
                        {
                            "name": "mangaUrl",
                            "type": "string"
                        },
                        {
                            "name": "mType",
                            "type": "MangaIndexType"
                        },
                        {
                            "name": "idx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "mangaUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mType",
                            "type": "MangaIndexType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIndexPage",
                    "args": [
                        {
                            "name": "mangaPage",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "mangaPage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logInToServer",
                    "args": [
                        {
                            "name": "idToken",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "idToken",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logoutFromServer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "searchManga",
                    "args": [
                        {
                            "name": "keyword",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "keyword",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../environments/environment';\nimport { SearchResult } from './model/search-result';\nimport { Subject } from 'rxjs';\nimport { Manga } from './model/manga';\nimport { MangaIndexType } from './model/manga-index-type.enum';\nimport { SseService, Message } from './sse.service';\nimport { MangaSite } from './manga-site.enum';\nimport { Auth } from './model/auth';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  constructor(private http: HttpClient, private sseService: SseService) {\n    this._currentSite = MangaSite.ManHuaRen;\n  }\n  serverUrl = environment.serverUrl;\n  _currentSite: MangaSite;\n\n  searchResultSubject = new Subject<SearchResult[]>();\n  mangaWIthIndexResultSubject = new Subject<Manga>();\n\n  imagesSseEvent = new Subject<Message>();\n\n  private _searchEmpty = true;\n\n  emptySearch() {\n    this._searchEmpty = true;\n    this.searchResultSubject.next(null);\n  }\n\n  get searchEmpty(): boolean {\n    return this._searchEmpty;\n  }\n\n  get allSiteNames(): string[] {\n    const keys = Object.keys(MangaSite);\n    return keys.map((key) => MangaSite[key]);\n  }\n\n  set currentSite(siteVal: MangaSite) {\n    this._currentSite = siteVal;\n  }\n\n  get currentSite(): MangaSite {\n    return this._currentSite;\n  }\n\n  get site(): string {\n    switch (this.currentSite) {\n      case MangaSite.ManHuaRen:\n        return 'manhuaren';\n      case MangaSite.ManHuaDB:\n        return 'manhuadb';\n      case MangaSite.ManHuaGui:\n        return 'manhuagui';\n      case MangaSite.ManHuaBei:\n        return 'manhuabei';\n      case MangaSite.ComicBus:\n        return 'comicbus';\n      default:\n        return 'manhuaren';\n    }\n  }\n\n  logInToServer(idToken: string) {\n    const url = `${this.serverUrl}auth/login`;\n    console.log(idToken);\n    this.http\n      .post<Auth>(url, idToken, {\n        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n      })\n      .subscribe((result) => {\n        this.http\n          .get(`${this.serverUrl}user/me`)\n          .subscribe((result) => console.log(result));\n      });\n  }\n\n  logoutFromServer() {\n    const url = `${this.serverUrl}auth/logout`;\n    this.http.get(url).subscribe((result) => console.log(result));\n  }\n\n  searchManga(keyword: string) {\n    const url = `${this.serverUrl}search/${this.site}/${keyword}`;\n\n    this.http.get<SearchResult[]>(url).subscribe((result) => {\n      this._searchEmpty = false;\n      this.searchResultSubject.next(result);\n    });\n  }\n\n  getIndexPage(mangaPage: string) {\n    const url = `${this.serverUrl}index/${this.site}/${mangaPage}`;\n    this.http.get<Manga>(url).subscribe((result) => {\n      this.mangaWIthIndexResultSubject.next(result);\n    });\n  }\n\n  getImages(mangaUrl: string, mType: MangaIndexType, idx: number) {\n    const splits = mangaUrl.split('/');\n    const mangaPage = splits[splits.length - 2];\n    const url = `${this.serverUrl}chapter/${this.site}/${mangaPage}?idx=${idx}&m_type_int=${mType}`;\n    console.log(url);\n    this.sseService.getServerSentEvent(url).subscribe((message) => {\n      this.imagesSseEvent.next(message);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sseService",
                        "type": "SseService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sseService",
                        "type": "SseService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "searchEmpty": {
                    "name": "searchEmpty",
                    "getSignature": {
                        "name": "searchEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 34
                    }
                },
                "allSiteNames": {
                    "name": "allSiteNames",
                    "getSignature": {
                        "name": "allSiteNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 38
                    }
                },
                "currentSite": {
                    "name": "currentSite",
                    "setSignature": {
                        "name": "currentSite",
                        "type": "void",
                        "args": [
                            {
                                "name": "siteVal",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 43,
                        "jsdoctags": [
                            {
                                "name": "siteVal",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentSite",
                        "type": "",
                        "returnType": "MangaSite",
                        "line": 47
                    }
                },
                "site": {
                    "name": "site",
                    "getSignature": {
                        "name": "site",
                        "type": "string",
                        "returnType": "string",
                        "line": 51
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "GoogleAuthService",
            "id": "injectable-GoogleAuthService-0d32deb2200fb379bc13acfc1685f14a",
            "file": "src/app/auth/google-auth.service.ts",
            "properties": [
                {
                    "name": "_authInstance",
                    "type": "gapi.auth2.GoogleAuth",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "imgUrl$",
                    "defaultValue": "new Subject<string>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isSignedIn$",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "initGoogleAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "signout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { from, Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleAuthService {\n  private _authInstance: gapi.auth2.GoogleAuth;\n  isSignedIn$ = new Subject<boolean>();  \n  imgUrl$ = new Subject<string>();\n  constructor(private api: ApiService) {\n    this.isSignedIn$.subscribe(signedIn => {\n      if (signedIn) {\n        const idToken = this._authInstance.currentUser.get().getAuthResponse().id_token;\n        const imgUrl = this._authInstance.currentUser.get().getBasicProfile().getImageUrl();\n        this.imgUrl$.next(imgUrl);\n        this.api.logInToServer(idToken);\n      }\n    });\n    this.initGoogleAuth();\n  }\n  initGoogleAuth(): void {\n    gapi.load('auth2', () => {\n      gapi.auth2.init({client_id: environment.googleClientId}).then(auth =>{\n        this._authInstance = auth;\n        this.isSignedIn$.next(auth.isSignedIn.get());\n        auth.isSignedIn.listen((signedIn) => this.isSignedIn$.next(signedIn));\n      });\n    });\n  }\n\n  signout(): void {\n    console.log('here');\n    from(this._authInstance.signOut()).subscribe(\n      () => this.api.logoutFromServer()\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SseService",
            "id": "injectable-SseService-6470fd96ddcebbfd322e16481b9d9cd8",
            "file": "src/app/sse.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEventSource",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventSource",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServerSentEvent",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface Message {\n  message: string;\n  total: number;\n  idx: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SseService {\n  constructor() {}\n\n  getServerSentEvent(url: string): Observable<Message> {\n    return Observable.create((observer) => {\n      const eventSource = this.getEventSource(url);\n\n      eventSource.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (event.data !== \"{}\")\n          { \n            observer.next(data);\n          }\n        else\n          {\n            eventSource.close();\n            observer.complete();\n          }\n      }\n\n      eventSource.onerror = error => {\n          observer.error(error);\n      }      \n    });\n  }\n\n  private getEventSource(url: string): EventSource {\n    return new EventSource(url);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-ebf1b53a3d007fc9ca221a7d25be9b69",
            "file": "src/app/common/click-outside.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Output,\n  ElementRef,\n  HostListener,\n} from '@angular/core';\n\n@Directive({\n  selector: '[appClickOutside]',\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside = new EventEmitter<void>();\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target) {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n}\n",
            "selector": "[appClickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "line": 17
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-af44a6e54de7cf9144c4f546bb049a2d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'client'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GoogleAuthService } from './auth/google-auth.service';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'client';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../node_modules/bootstrap/scss/bootstrap.scss\";\n.root-container {\n  min-height: 100%;\n}\n\n.navbar {\n  -webkit-box-shadow: 0px 10px 13px 0px rgba(0, 0, 0, 0.48);\n  -moz-box-shadow: 0px 10px 13px 0px rgba(0, 0, 0, 0.48);\n  box-shadow: 0px 10px 13px 0px rgba(0, 0, 0, 0.48);\n}\n\n.flex-fille {\n  flex: 1 1 auto;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"root-container w-100 bg-dark d-flex flex-column\">\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n    <a class=\"navbar-brand\" href=\"#\">TT Manga</a>\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarSupportedContent\"\n      aria-controls=\"navbarSupportedContent\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class=\"nav-item active\">\n          <a class=\"nav-link\" href=\"#\"\n            >Home <span class=\"sr-only\">(current)</span></a\n          >\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">Favorite</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" href=\"#\">History</a>\n        </li>\n      </ul>\n      <app-user-nav></app-user-nav>\n      <app-google-auth></app-google-auth>      \n    </div>\n  </nav>\n  <div class=\"router-container flex-fill\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FavoriteComponent",
            "id": "component-FavoriteComponent-d1e8b0466100238465b337968f41a510",
            "file": "src/app/ui/user/favorite/favorite.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-favorite",
            "styleUrls": [
                "./favorite.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./favorite.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-favorite',\n  templateUrl: './favorite.component.html',\n  styleUrls: ['./favorite.component.scss']\n})\nexport class FavoriteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./favorite.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>favorite works!</p>\n"
        },
        {
            "name": "GoogleAuthComponent",
            "id": "component-GoogleAuthComponent-23a639e36fd0fb8606199b68bbb60815",
            "file": "src/app/ui/auth/google-auth/google-auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-google-auth",
            "styleUrls": [
                "./google-auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./google-auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSignedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "signout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { GoogleAuthService } from 'src/app/auth/google-auth.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-google-auth',\n  templateUrl: './google-auth.component.html',\n  styleUrls: ['./google-auth.component.scss'],\n})\nexport class GoogleAuthComponent implements OnInit, OnDestroy {\n  isSignedIn: boolean;\n  ngUnsubscribe = new Subject<void>();\n  constructor(\n    private googleAuthService: GoogleAuthService,\n    private cd: ChangeDetectorRef,\n  ) {\n    this.isSignedIn = false;\n  }\n\n  ngOnInit(): void {    \n    this.googleAuthService.isSignedIn$\n      .pipe(takeUntil(this.ngUnsubscribe))\n      .subscribe((isSignedIn) => {\n        if (isSignedIn !== this.isSignedIn) {               \n          this.isSignedIn = isSignedIn;          \n          this.cd.detectChanges();\n          if (!this.isSignedIn) window.open(\"/\", \"_self\");\n        }\n      });\n  }\n\n  signout(): void {\n    return this.googleAuthService.signout();\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./google-auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "googleAuthService",
                        "type": "GoogleAuthService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "googleAuthService",
                        "type": "GoogleAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"google-auth-container\">\n  <div *ngIf=\"!isSignedIn\" class=\"g-signin2\"></div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HistoryComponent",
            "id": "component-HistoryComponent-a53a241cecbc1f076755ce1bb9603d17",
            "file": "src/app/ui/user/history/history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history",
            "styleUrls": [
                "./history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-history',\n  templateUrl: './history.component.html',\n  styleUrls: ['./history.component.scss']\n})\nexport class HistoryComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"history-container m-auto\">\n    <div class=\"header-container\">\n        <h1>History</h1>\n    </div>\n    <div class=\"list-group\">\n        <a href=\"#\" class=\"list-group-item list-group-item-action active\">\n            <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"mb-1\">List group item heading</h5>\n                <small>3 days ago</small>\n            </div>\n            <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius\n                blandit.\n            </p>\n            <small>Donec id elit non mi porta.</small>\n        </a>\n        <a href=\"#\" class=\"list-group-item list-group-item-action\">\n            <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"mb-1\">List group item heading</h5>\n                <small class=\"text-muted\">3 days ago</small>\n            </div>\n            <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius\n                blandit.\n            </p>\n            <small class=\"text-muted\">Donec id elit non mi porta.</small>\n        </a>\n        <a href=\"#\" class=\"list-group-item list-group-item-action\">\n            <div class=\"d-flex w-100 justify-content-between\">\n                <h5 class=\"mb-1\">List group item heading</h5>\n                <small class=\"text-muted\">3 days ago</small>\n            </div>\n            <p class=\"mb-1\">Donec id elit non mi porta gravida at eget metus. Maecenas sed diam eget risus varius\n                blandit.\n            </p>\n            <small class=\"text-muted\">Donec id elit non mi porta.</small>\n        </a>\n    </div>\n</div>"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-d0148860dd2f4ff734b22c3fb40972f3",
            "file": "src/app/ui/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container w-100 h-100\">\n  <app-search-form></app-search-form>\n</div>\n"
        },
        {
            "name": "MangaIndexComponent",
            "id": "component-MangaIndexComponent-b6293d494be8c5fb38debb7fa7945353",
            "file": "src/app/ui/manga-index/manga-index.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-manga-index",
            "styleUrls": [
                "./manga-index.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./manga-index.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activatedTab",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "manga$",
                    "type": "Observable<Manga>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "MangaIndexType",
                    "defaultValue": "MangaIndexType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "many",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "numCol",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "numRow",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "onLinkClicked",
                    "args": [
                        {
                            "name": "mangaPage",
                            "type": "string"
                        },
                        {
                            "name": "idx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "mangaPage",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTabLinkClicked",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ApiService } from 'src/app/api.service';\nimport { Observable, Subject } from 'rxjs';\nimport { Manga } from 'src/app/model/manga';\nimport { MangaIndexType } from 'src/app/model/manga-index-type.enum';\n\ndeclare var $: any;\n\n@Component({\n  selector: 'app-manga-index',\n  templateUrl: './manga-index.component.html',\n  styleUrls: ['./manga-index.component.scss'],\n})\nexport class MangaIndexComponent implements OnInit, OnDestroy {\n  manga$: Observable<Manga>;\n  ngUnsubscribe = new Subject<void>();\n  numCol: number;\n  numRow: number;\n  many: number[];\n  activatedTab: number;\n  MangaIndexType = MangaIndexType;\n\n  constructor(private api: ApiService) {\n    this.manga$ = this.api.mangaWIthIndexResultSubject;\n  }\n\n  ngOnInit(): void {\n    this.many = new Array(100);\n    this.activatedTab = 0;\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  onLinkClicked(mangaPage: string, idx: number) {\n    $('#exampleModalCenter').modal('show');\n    this.api.getImages(mangaPage, this.activatedTab, idx);\n  }\n\n  onTabLinkClicked(idx: number) {\n    this.activatedTab = idx;    \n  }\n\n  get tabNames(): string[] {\n    const keys = Object.keys(MangaIndexType);\n    return keys.slice(keys.length / 2, keys.length);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"node_modules/bootstrap/scss/bootstrap.scss\";\n.manga-index-type-tabs-container,\n.index-table-container {\n  max-width: 75%;\n}\n.chapter-link {  \n  color: $dark;\n}\n\n.chapter-link-container:hover {\n  background-color: $gray-300;\n}\n\n.chapter-link:hover {\n  color: black;\n}\n\n.modal {\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n\n.modal-dialog {\n  max-width: fit-content;\n}\n\n.tab-link {\n  border-top-left-radius: 0 !important;\n  border-top-right-radius: 0 !important;\n}\n",
                    "styleUrl": "./manga-index.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "tabNames": {
                    "name": "tabNames",
                    "getSignature": {
                        "name": "tabNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 46
                    }
                }
            },
            "templateData": "<div *ngIf=\"manga$ | async as manga\" class=\"manga-index-container\">\n  <div class=\"jumbotron bg-primary rounded-0 w-100 mx-auto my-0\">\n    <div class=\"w-75 m-auto d-flex\">\n      <div class=\"thum-img-container\">\n        <img [src]=\"'data:image/jpeg;base64,' + manga.thum_img\">\n      </div>\n      <div class=\"meta-container w-75 ml-5\">\n        <h1 class=\"display-4 text-light\">{{ manga.name }}</h1>     \n        <hr class=\"my-4\" />\n        <p class=\"lead text-light\">Last Update: {{ manga.last_update }}</p>      \n        <p class=\"lead text-light\">Status: {{ manga.finished ? 'Finished' : 'Ongoing' }}</p>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"manga-index-type-tabs-container m-auto\">\n    <ul class=\"nav nav-tabs nav-justified\">\n      <li *ngFor=\"let item of tabNames; let idx = index\" class=\"nav-item\">\n        <a\n          class=\"tab-link nav-link bg-light\"\n          [ngClass]=\"idx == this.activatedTab ? 'active' : ''\"\n          (click)=\"onTabLinkClicked(idx)\"\n          >{{ item }}</a\n        >\n      </li>\n    </ul>\n  </div>\n\n  <div class=\"index-table-container bg-light mx-auto\">\n    <div class=\"row mx-2 justify-content-md-center\">\n      <div\n        *ngFor=\"\n          let chapter of manga.chapters[MangaIndexType[activatedTab]];\n          let idx = index\n        \"\n        class=\"chapter-link-container col-sm-3 col-lg-2 m-2\"\n      >\n        <a\n          class=\"chapter-link nav-link text-center\"\n          (click)=\"onLinkClicked(manga.url, idx)\"\n          >{{ chapter.title }}</a\n        >\n      </div>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"modal fade\"\n  id=\"exampleModalCenter\"\n  tabindex=\"-1\"\n  role=\"dialog\"\n  aria-labelledby=\"exampleModalLongTitle\"\n  aria-hidden=\"true\"\n>\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-body\">\n        <app-view-panel></app-view-panel>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-e4854427590efc9cdba084524147e2bd",
            "file": "src/app/ui/user/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>profile works!</p>\n"
        },
        {
            "name": "SearchFormComponent",
            "id": "component-SearchFormComponent-29e15c2b67ffb45102f13dfaab7e79cb",
            "file": "src/app/ui/search-form/search-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-form",
            "styleUrls": [
                "./search-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_dropdownHidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "search",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "searchResult",
                    "type": "Observable<SearchResult[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "site",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "genMangaPage",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "onClickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "onDivClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "suggestionOnClick",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport { ApiService } from 'src/app/api.service';\nimport { SearchResult } from 'src/app/model/search-result';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  takeUntil,\n  debounceTime,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\ndeclare var $: any;\n\n\n@Component({\n  selector: 'app-search-form',\n  templateUrl: './search-form.component.html',\n  styleUrls: ['./search-form.component.scss'],\n})\nexport class SearchFormComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  search = new FormControl('', Validators.required);\n  site = new FormControl();\n  searchResult: Observable<SearchResult[]>;\n  ngUnsubscribe = new Subject<void>();\n  private _dropdownHidden: boolean;\n\n  constructor(\n    private fb: FormBuilder,\n    private api: ApiService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      search: this.search,\n      site: this.site,\n    });\n    this.searchResult = this.api.searchResultSubject;\n    this.form.controls.site.setValue(this.api.currentSite);\n  }\n\n  ngOnInit(): void {\n    this._dropdownHidden = true;\n    this.form.valueChanges\n      .pipe(takeUntil(this.ngUnsubscribe))\n      .pipe(debounceTime(150), distinctUntilChanged())\n      .subscribe((value) => {\n        const { search, site } = value;\n        console.log(site)\n        this.api.currentSite = site;        \n        if (search.length > 3) this.api.searchManga(search);\n        if (search.length === 0) this.api.emptySearch();\n      });\n  }\n\n  genMangaPage(url: string) {\n    switch(this.api.currentSite) {\n\n    }\n  }\n\n  suggestionOnClick(url: string) {\n    const splits = url.split('/');\n    const mangaPage = splits[splits.length-2];\n    console.log(url);\n    this.api.getIndexPage(mangaPage);\n    this.router.navigate(['/manga-index']);\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  onClick() {\n    const { search } = this.form.value;\n    this.api.searchManga(search);\n  }\n\n  get dropdownHidden(): boolean {\n    return this._dropdownHidden || this.api.searchEmpty;\n  }\n\n  onClickOutside() {\n    this._dropdownHidden = true;\n  }\n\n  onDivClick() {\n    this._dropdownHidden = false;\n  }\n\n  get siteNames(): string[] {\n    return this.api.allSiteNames;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../node_modules/bootstrap/scss/bootstrap.scss\";\n.dropdown-menu {\n  display: block;\n}\n\n.search-form-container {\n  position: relative;\n}\n\n.suggestion-container {\n  top: 100%;\n}\n\n.center-container {\n  top: 150px;\n}\n\n.list-group-item:hover {\n  background-color: $light;\n}\n\n.input-container {\n  flex: 1 1 auto;\n}\n\n.site-select {\n  flex: 0 1 200px;\n}",
                    "styleUrl": "./search-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "api",
                        "type": "ApiService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "dropdownHidden": {
                    "name": "dropdownHidden",
                    "getSignature": {
                        "name": "dropdownHidden",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 85
                    }
                },
                "siteNames": {
                    "name": "siteNames",
                    "getSignature": {
                        "name": "siteNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 97
                    }
                }
            },
            "templateData": "<div class=\"search-form-container h-100\">\n  <div class=\"d-flex justify-content-center h-100 position-relative\">\n    <div class=\"center-container position-absolute w-50\">\n      <h2 class=\"text-light\">Search manga from...</h2>\n      <form [formGroup]=\"form\" class=\"form my-2 my-lg-0 d-flex\">\n        <div\n          appClickOutside\n          (clickOutside)=\"onClickOutside()\"\n          (click)=\"onDivClick()\"\n          class=\"input-container position-relative d-flex mx-auto w-75\"\n        >\n          <input\n            class=\"form-control form-control-lg\"\n            type=\"search\"\n            placeholder=\"Search...\"\n            aria-label=\"Search\"\n            formControlName=\"search\"\n          />\n          <div\n            class=\"suggestion-container position-absolute my-2 w-100\"\n            [hidden]=\"dropdownHidden\"\n          >\n            <ul class=\"list-group\">\n              <li\n                *ngFor=\"let result of searchResult | async | slice: 0:10\"\n                (click)=\"suggestionOnClick(result.url)\"\n                class=\"list-group-item\"\n              >\n                {{ result.name }}\n              </li>\n            </ul>\n          </div>\n        </div>\n        <select\n          id=\"siteState\"\n          class=\"site-select form-control form-control-lg ml-2\"\n          formControlName=\"site\"\n        >\n          <option *ngFor=\"let name of siteNames\" [ngValue]=\"name\">{{\n            name\n          }}</option>\n        </select>\n      </form>\n    </div>\n  </div>  \n</div>\n"
        },
        {
            "name": "SearchResultComponent",
            "id": "component-SearchResultComponent-2edf6e78ba65bd46c2ed52b0013c9579",
            "file": "src/app/ui/search-result/search-result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search-result",
            "styleUrls": [
                "./search-result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchResult",
                    "type": "Observable<SearchResult[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SearchResult } from 'src/app/model/search-result';\nimport { Observable } from 'rxjs';\nimport { ApiService } from 'src/app/api.service';\n\n@Component({\n  selector: 'app-search-result',\n  templateUrl: './search-result.component.html',\n  styleUrls: ['./search-result.component.scss']\n})\nexport class SearchResultComponent implements OnInit {\n  searchResult: Observable<SearchResult[]>;\n  constructor(private api: ApiService) { \n    this.searchResult = this.api.searchResultSubject;\n  }\n\n  ngOnInit(): void {    \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search-result.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul>\n  <li *ngFor=\"let manga of searchResult | async\">{{ manga.name }}</li>\n</ul>\n"
        },
        {
            "name": "UserNavComponent",
            "id": "component-UserNavComponent-7d2bca5bb8c7426855df805a9930eb44",
            "file": "src/app/ui/auth/user-nav/user-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-nav",
            "styleUrls": [
                "./user-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imgUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "imgUrl$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "signout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { GoogleAuthService } from 'src/app/auth/google-auth.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-user-nav',\n  templateUrl: './user-nav.component.html',\n  styleUrls: ['./user-nav.component.scss']\n})\nexport class UserNavComponent implements OnInit {\n\n  imgUrl$: Observable<string>;\n  imgUrl: string;\n\n  constructor(private googleAuthService: GoogleAuthService,\n    private cd: ChangeDetectorRef,\n    ) { }\n\n  ngOnInit(): void {\n    this.imgUrl$ = this.googleAuthService.imgUrl$;\n    this.imgUrl$.subscribe(imgUrl => {      \n      this.imgUrl = imgUrl;\n      this.cd.detectChanges();\n    })\n  }\n\n  signout(): void {\n    return this.googleAuthService.signout();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../node_modules/bootstrap/scss/bootstrap.scss';\n\n.user-nav-container {\n  height: 40px;\n}\n\n.profile-img {\n  height: 100%;\n  border-radius: 10px;\n  border-color: $gray-700;\n  border-width: 2px;\n  border-style: solid;\n  cursor: pointer;\n}\n\n.user-menu-dropdown {\n  right: 0;\n  left: auto;\n}",
                    "styleUrl": "./user-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "googleAuthService",
                        "type": "GoogleAuthService"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "googleAuthService",
                        "type": "GoogleAuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"user-nav-container mx-2\" *ngIf=\"imgUrl\">\n  <img\n    class=\"profile-img\"\n    [src]=\"imgUrl\"\n    id=\"dropdownMenuButton\"\n    data-toggle=\"dropdown\"\n    aria-haspopup=\"true\"\n    aria-expanded=\"false\"\n  />\n  <div class=\"dropdown\">\n    <div class=\"dropdown-menu user-menu-dropdown\" aria-labelledby=\"dropdownMenuButton\">\n      <a class=\"dropdown-item\" href=\"/profile\">Profile</a>\n      <a class=\"dropdown-item\" href=\"/favorite\">Favorite</a>\n      <a class=\"dropdown-item\" href=\"/history\">History</a>\n      <a class=\"dropdown-item\" href=\"#\" (click)=\"signout()\">Logout</a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ViewPanelComponent",
            "id": "component-ViewPanelComponent-370921df8addf8c22569f1fbba9becf9",
            "file": "src/app/ui/view-panel/view-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-panel",
            "styleUrls": [
                "./view-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "observable",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ApiService } from 'src/app/api.service';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-view-panel',\n  templateUrl: './view-panel.component.html',\n  styleUrls: ['./view-panel.component.scss'],\n})\nexport class ViewPanelComponent implements OnInit, OnDestroy {\n  constructor(\n    private cd: ChangeDetectorRef,\n    private sanitizer: DomSanitizer,\n    private api: ApiService\n  ) {\n    console.log('constructing view panel');\n  }\n  ngUnsubscribe = new Subject<void>();\n  observable: Observable<number>;\n  messages: any[];\n\n  ngOnInit(): void {\n    console.log('in view panel init');\n    this.messages = null;\n    this.api.imagesSseEvent\n      .pipe(takeUntil(this.ngUnsubscribe))\n      .subscribe((message) => {\n        const total = message.total;\n        if (\n          this.messages === null ||\n          this.messages.length !== total ||\n          this.messages[message.idx] !== undefined\n        ) {\n          this.messages = new Array(total);\n        }\n        this.messages[message.idx] = this.sanitizer.bypassSecurityTrustUrl(\n          'data:image/jpeg;base64,' + message.message\n        );\n\n        this.cd.detectChanges();\n      });\n  }\n\n  ngOnDestroy(): void {\n    console.log('in view panel destroy');\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./view-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "api",
                        "type": "ApiService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"view-panel-container\">\n  <div *ngFor=\"let message of messages\">\n    <img class=\"d-block m-auto mw-100\" [src]=\"message\" />\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "FavoriteComponent"
                        },
                        {
                            "name": "GoogleAuthComponent"
                        },
                        {
                            "name": "HistoryComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "MangaIndexComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "SearchFormComponent"
                        },
                        {
                            "name": "UserNavComponent"
                        },
                        {
                            "name": "ViewPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "any"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/manga-index/manga-index.component.ts",
                "type": "any"
            },
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ui/search-form/search-form.component.ts",
                "type": "any"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n         production: false,\n         serverUrl: 'http://localhost:8000/api/',\n         googleClientId:\n           '876324062191-bdqmm1gsrnha94r59tbv165nnn8j348e.apps.googleusercontent.com',\n       }"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MangaIndexType",
                "childs": [
                    {
                        "name": "Chapter",
                        "value": "0"
                    },
                    {
                        "name": "Volume",
                        "value": "1"
                    },
                    {
                        "name": "Misc",
                        "value": "2"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/model/manga-index-type.enum.ts"
            },
            {
                "name": "MangaSite",
                "childs": [
                    {
                        "name": "ManHuaRen",
                        "value": "漫畫人"
                    },
                    {
                        "name": "ManHuaDB",
                        "value": "漫畫DB"
                    },
                    {
                        "name": "ManHuaGui",
                        "value": "漫畫櫃"
                    },
                    {
                        "name": "ManHuaBei",
                        "value": "漫畫唄"
                    },
                    {
                        "name": "ComicBus",
                        "value": "8Comic"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/manga-site.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "any"
                }
            ],
            "src/app/ui/manga-index/manga-index.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/manga-index/manga-index.component.ts",
                    "type": "any"
                }
            ],
            "src/app/ui/search-form/search-form.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ui/search-form/search-form.component.ts",
                    "type": "any"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n         production: false,\n         serverUrl: 'http://localhost:8000/api/',\n         googleClientId:\n           '876324062191-bdqmm1gsrnha94r59tbv165nnn8j348e.apps.googleusercontent.com',\n       }"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/model/manga-index-type.enum.ts": [
                {
                    "name": "MangaIndexType",
                    "childs": [
                        {
                            "name": "Chapter",
                            "value": "0"
                        },
                        {
                            "name": "Volume",
                            "value": "1"
                        },
                        {
                            "name": "Misc",
                            "value": "2"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/model/manga-index-type.enum.ts"
                }
            ],
            "src/app/manga-site.enum.ts": [
                {
                    "name": "MangaSite",
                    "childs": [
                        {
                            "name": "ManHuaRen",
                            "value": "漫畫人"
                        },
                        {
                            "name": "ManHuaDB",
                            "value": "漫畫DB"
                        },
                        {
                            "name": "ManHuaGui",
                            "value": "漫畫櫃"
                        },
                        {
                            "name": "ManHuaBei",
                            "value": "漫畫唄"
                        },
                        {
                            "name": "ComicBus",
                            "value": "8Comic"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/manga-site.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "manga-index",
                        "component": "MangaIndexComponent"
                    },
                    {
                        "path": "",
                        "component": "MainComponent"
                    },
                    {
                        "path": "profile",
                        "component": "ProfileComponent"
                    },
                    {
                        "path": "favorite",
                        "component": "FavoriteComponent"
                    },
                    {
                        "path": "history",
                        "component": "HistoryComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/google-auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoogleAuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common/click-outside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/http-request-interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpRequestInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/model/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/chapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Chapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/model/manga.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Manga",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/model/search-result.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SearchResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/sse.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SseService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sse.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/auth/google-auth/google-auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GoogleAuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/auth/user-nav/user-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/manga-index/manga-index.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MangaIndexComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/manga-index/manga-index.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/search-form/search-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/search-form/search-form.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/search-result/search-result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/user/favorite/favorite.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FavoriteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/user/history/history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/user/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ui/view-panel/view-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}